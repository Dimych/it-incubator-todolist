{"version":3,"sources":["components/Todolist/Todolist.module.css","store/tasksReducer/tasksReducer.ts","components/ChangedSpanIntoInput/ChangedSpanIntoInput.tsx","components/TodolistHeader/TodolistHeader.tsx","components/AddForm/AddForm.tsx","store/todolistsReducer/todolistsReducer.ts","components/Task/Task.tsx","components/Todolist/Todolist.tsx","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["module","exports","ActionsTypes","ChangedSpanIntoInput","React","memo","title","changeItemText","useState","editMod","setEditMod","value","setValue","editModOn","useCallback","editModOff","onChangeInputText","e","currentTarget","TextField","id","size","onBlur","onChange","autoFocus","onDoubleClick","TodolistHeader","removeTodolist","changeTodolistTitle","todolistId","deleteTodolist","onChangeTitleText","newTitle","className","s","todolistHeader","todolistTitle","IconButton","aria-label","onClick","color","AddForm","addNewItem","inputValue","setInputValue","error","setError","addTask","trim","taskInput","label","variant","onKeyPress","key","Boolean","style","padding","initialState","changeTodolistFilterValueAC","newFilterValue","type","actions","ADD_TASK","v1","taskId","REMOVE_TASK","CHANGE_TASK_TITLE","CHANGE_CHECKED_STATUS","Task","task","dispatch","useDispatch","onClickCheckBox","onChangeTaskTitleText","isDone","taskCheckbox","checked","taskTitle","taskBtn","Todolist","filter","newArrTasks","allTasks","t","onFilterAll","onFilterActive","onFilterCompleted","addNewTask","todolist","tasks","map","filterButtons","Button","margin","width","fontSize","AppWithRedux","todolists","useSelector","state","addNewTodolist","action","AppBar","position","Toolbar","edge","Menu","Typography","Container","Grid","container","tl","item","Paper","elevation","rootReducer","combineReducers","newTask","stateCopy","newTodolist","newArrTodolist","find","td","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e8df35a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__3FQwx\",\"task\":\"Todolist_task__wGIi0\",\"taskInput\":\"Todolist_taskInput__1_wg0\",\"taskCheckbox\":\"Todolist_taskCheckbox__33cCi\",\"taskTitle\":\"Todolist_taskTitle__2nSxy\",\"error\":\"Todolist_error__3s5Cc\",\"arrayInputAddTasks\":\"Todolist_arrayInputAddTasks__lKjrK\",\"activeButton\":\"Todolist_activeButton__33tQ8\",\"todolistHeader\":\"Todolist_todolistHeader__3N_h6\",\"todolistTitle\":\"Todolist_todolistTitle__2y8df\"};","import {TasksType, TaskType} from \"../../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    ADD_TODOLIST,\r\n    addTodolistAC,\r\n    REMOVE_TODOLIST,\r\n    removeTodolistAC,\r\n} from \"../todolistsReducer/todolistsReducer\";\r\n\r\nexport enum ActionsTypes {\r\n    ADD_TASK = 'ADD_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE',\r\n    CHANGE_CHECKED_STATUS = 'CHANGE_CHECKED_STATUS',\r\n}\r\n\r\ntype ActionsType = ReturnType<ActionType<typeof actions>>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ActionsTypes.ADD_TASK:\r\n            const newTask: TaskType = {id: action.id, isDone: false, title: action.title}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]]\r\n            }\r\n        case ActionsTypes.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        case ActionsTypes.CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, title: action.newTitle} : task)\r\n                }\r\n        case ActionsTypes.CHANGE_CHECKED_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, isDone: action.value} : task)\r\n            }\r\n        case ADD_TODOLIST:{\r\n                const stateCopy = {...state}\r\n                stateCopy[action.todolistId] = []\r\n                return stateCopy\r\n            }\r\n        case REMOVE_TODOLIST:{\r\n                const stateCopy = {...state}\r\n                delete stateCopy[action.id]\r\n                return stateCopy\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport const actions = {\r\n    addNewTaskAC: (todolistId: string, title: string) => ({type: ActionsTypes.ADD_TASK, todolistId, title, id: v1() } as const),\r\n    removeTaskAC: (todolistId: string, taskId: string) => ({type: ActionsTypes.REMOVE_TASK, todolistId, taskId} as const),\r\n    changeTaskTitleTextAC: (todolistId: string, taskId: string, newTitle: string) => ({ type: ActionsTypes.CHANGE_TASK_TITLE, todolistId, taskId, newTitle } as const),\r\n    changeCheckedStatusAC: (todolistId: string, taskId: string, value: boolean) => ({ type: ActionsTypes.CHANGE_CHECKED_STATUS, todolistId, taskId, value } as const),\r\n}","import React, {ChangeEvent, useCallback, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\"\r\n\r\nexport type ChangedSpanIntoInputPropsType = {\r\n    title: string\r\n    changeItemText: (value: string) => void\r\n}\r\n\r\nexport const ChangedSpanIntoInput: React.FC<ChangedSpanIntoInputPropsType> = React.memo(({title, changeItemText}) => {\r\n    let [editMod, setEditMod] = useState(false)\r\n    let [value, setValue] = useState('')\r\n    //----ON-------\r\n    const editModOn = useCallback(() => {\r\n        setEditMod(true)\r\n        setValue(title)\r\n    }, [title])\r\n    //----OFF-----\r\n    const editModOff = useCallback(() => {\r\n        setEditMod(false)\r\n        changeItemText(value)\r\n    }, [changeItemText,value])\r\n    //-----input------\r\n    const onChangeInputText = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {editMod\r\n                ? <TextField id=\"standard-size-small\"\r\n                             size=\"small\"\r\n                             onBlur={editModOff}\r\n                             value={value}\r\n                             onChange={onChangeInputText} autoFocus/>\r\n                : <div onDoubleClick={editModOn}>{title}</div>\r\n            }\r\n        </div>\r\n    )\r\n})","import s from \"../Todolist/Todolist.module.css\"\r\nimport {ChangedSpanIntoInput} from \"../ChangedSpanIntoInput/ChangedSpanIntoInput\"\r\nimport React, {useCallback} from \"react\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = React.memo(({removeTodolist, changeTodolistTitle, title, todolistId}) => {\r\n    let deleteTodolist = useCallback(() => {\r\n        removeTodolist(todolistId)\r\n    }, [removeTodolist, todolistId])\r\n\r\n    let onChangeTitleText = useCallback((newTitle: string, todolistId: string) => {\r\n        changeTodolistTitle(newTitle, todolistId)\r\n    }, [changeTodolistTitle])\r\n    return (\r\n        <div className={s.todolistHeader}>\r\n            <div className={s.todolistTitle}>\r\n                <ChangedSpanIntoInput title={title} changeItemText={(newTitle) => {\r\n                    onChangeTitleText(newTitle, todolistId)\r\n                }}/>\r\n            </div>\r\n\r\n            <div>\r\n                <IconButton aria-label=\"delete\" onClick={deleteTodolist}>\r\n                    <DeleteIcon color={\"secondary\"}/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport s from \"../Todolist/Todolist.module.css\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleOutlineTwoToneIcon from \"@material-ui/icons/AddCircleOutlineTwoTone\";\r\n\r\nexport type AddFormPropsType = {\r\n    addNewItem: (inputValue: string) => void\r\n}\r\nexport const AddForm: React.FC<AddFormPropsType> = React.memo(({addNewItem}) => {\r\n    let [inputValue, setInputValue] = useState<string>('')\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n    let addTask = useCallback((inputValue: string) => {\r\n        if (inputValue.trim()) {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        } else {\r\n            setError('field is required')\r\n        }\r\n    }, [addNewItem])\r\n\r\n\r\n    let onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        inputValue.trim() && setError(null)\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    let addInputText = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (inputValue.trim() && e.key === 'Enter') {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskInput}>\r\n            <TextField id=\"outlined-error-helper-text\"\r\n                       label={error ? \"error\" : \"new task\"}\r\n                       variant=\"outlined\"\r\n                       color={'secondary'}\r\n                       value={inputValue}\r\n                       onChange={onInputChange}\r\n                       onKeyPress={addInputText}\r\n                       error={Boolean(error)}\r\n\r\n            />\r\n            <IconButton onClick={() => addTask(inputValue)}>\r\n                <AddCircleOutlineTwoToneIcon color={\"primary\"} style={{padding: '0px'}}/>\r\n            </IconButton>\r\n            {error ? <div className={s.error}> {error} </div> : null}\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\"\r\n\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\nconst CHANGE_TODOLIST_FILTER_VALUE = 'CHANGE_TODOLIST_FILTER_VALUE'\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            let newTodolist: TodolistType = {id: action.todolistId, title: action.title, filter: 'all'}\r\n            return [...state, newTodolist]\r\n        case REMOVE_TODOLIST:\r\n            let newArrTodolist = state.filter(t => t.id !== action.id)\r\n            return [...newArrTodolist]\r\n        case CHANGE_TODOLIST_TITLE:{\r\n            let todolist = state.find(td => td.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.newTitle\r\n            }\r\n            return [ ...state]\r\n        }\r\n        case CHANGE_TODOLIST_FILTER_VALUE:{\r\n            let todolist = state.find(td => td.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.newFilterValue\r\n            } return [ ...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type ActionsType =\r\n    ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterValueAC>\r\n\r\n\r\nexport const addTodolistAC = (title: string) => ({type: ADD_TODOLIST, title, todolistId: v1()} as const)\r\nexport const removeTodolistAC = (id: string) => ({type: REMOVE_TODOLIST, id} as const)\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) => ({type: CHANGE_TODOLIST_TITLE, id, newTitle} as const)\r\nexport const changeTodolistFilterValueAC = (id: string, newFilterValue: FilterValuesType) => ({type: CHANGE_TODOLIST_FILTER_VALUE, id, newFilterValue} as const)","import {useDispatch} from \"react-redux\"\r\nimport {actions} from \"../../store/tasksReducer/tasksReducer\"\r\nimport s from \"../Todolist/Todolist.module.css\"\r\nimport {ChangedSpanIntoInput} from \"../ChangedSpanIntoInput/ChangedSpanIntoInput\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport React, {useCallback} from \"react\"\r\nimport {TaskType} from \"../../App\"\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId}) => {\r\n    let dispatch = useDispatch()\r\n    let onClickCheckBox = useCallback((e: boolean, id: string) => {\r\n        dispatch(actions.changeCheckedStatusAC(todolistId, id, e))\r\n    }, [dispatch, todolistId])\r\n\r\n    const onChangeTaskTitleText = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(actions.changeTaskTitleTextAC(todolistId, taskId, newTitle))\r\n    }, [dispatch])\r\n    return (\r\n        <div key={task.id} className={`${s.task} + ${task.isDone ? s.taskCheckbox : ''}`}>\r\n            <div>\r\n                <input type=\"checkbox\" checked={task.isDone} onClick={(e) => {\r\n                    onClickCheckBox(e.currentTarget.checked, task.id)\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskTitle}>\r\n                <ChangedSpanIntoInput title={task.title} changeItemText={(newTitle) => {\r\n                    onChangeTaskTitleText(task.id, newTitle, todolistId)\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskBtn}>\r\n                <IconButton aria-label=\"delete\" onClick={() => {\r\n                    dispatch(actions.removeTaskAC(todolistId, task.id))\r\n                }}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from \"react\"\r\nimport {FilterValuesType, TaskType} from \"../../App\"\r\nimport s from './Todolist.module.css'\r\nimport {TodolistHeader} from \"../TodolistHeader/TodolistHeader\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {AddForm} from \"../AddForm/AddForm\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {actions} from \"../../store/tasksReducer/tasksReducer\"\r\nimport {changeTodolistFilterValueAC} from \"../../store/todolistsReducer/todolistsReducer\"\r\nimport {Task} from \"../Task/Task\"\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    removeTask?: any\r\n    changeFilter?: any\r\n    addNewTask?: any\r\n    onCheckedBox?: any\r\n    changeTaskTitleText?: any\r\n\r\n    todolistId: string\r\n    title: string\r\n    newArrTasks: Array<TaskType>\r\n    removeTodolist: (todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({todolistId, changeTodolistTitle, title, filter, newArrTasks, removeTodolist}) => {\r\n    let dispatch = useDispatch()\r\n\r\n    let allTasks = newArrTasks\r\n    if (filter === 'active') {\r\n        allTasks = newArrTasks.filter(t => !t.isDone)\r\n    }\r\n    if (filter === 'completed') {\r\n        allTasks = newArrTasks.filter(t => t.isDone)\r\n    }\r\n//-----------filter------------\r\n    let onFilterAll = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'all'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterActive = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'active'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterCompleted = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'completed'))\r\n    }, [dispatch, todolistId])\r\n//------------title------------\r\n\r\n    //----add tasks---\r\n    const addNewTask = useCallback((inputValue: string) => {\r\n        dispatch(actions.addNewTaskAC(todolistId, inputValue))\r\n    }, [dispatch, todolistId])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div>\r\n                <TodolistHeader title={title} todolistId={todolistId} removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}/>\r\n                <AddForm addNewItem={addNewTask}/>\r\n\r\n                <div className={s.tasks}>\r\n                    {allTasks.map(t => <Task key={t.id} task={t} todolistId={todolistId}/>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onFilterAll}\r\n                        variant={filter === 'all' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}> All</Button>\r\n                <Button onClick={onFilterActive}\r\n                        variant={filter === 'active' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Active</Button>\r\n                <Button onClick={onFilterCompleted}\r\n                        variant={filter === 'completed' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './components/Todolist/Todolist'\r\nimport {AddForm} from \"./components/AddForm/AddForm\"\r\nimport {AppBar, Button, IconButton, Toolbar, Typography, Container, Grid, Paper} from '@material-ui/core'\r\nimport {Menu} from \"@material-ui/icons\"\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./store/todolistsReducer/todolistsReducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"./store/store\"\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const addNewTodolist = useCallback((inputValue: string) => {\r\n        let action = addTodolistAC(inputValue)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleAC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        let action = removeTodolistAC(todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        <div className='app'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"> </Typography>\r\n                    <Button color=\"inherit\"> </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <div className=\"addTodolist\">\r\n                        <div className='addTodolistTitle'>Add new TodoList:</div>\r\n                        <AddForm addNewItem={(inputValue) => {\r\n                            addNewTodolist(inputValue)\r\n                        }}/>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                    <div className=\"allTodolists\">\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let newArrTasks = tasks[tl.id]\r\n                                return (\r\n                                    <Grid item>\r\n                                        <Paper elevation={5}>\r\n                                            <Todolist\r\n                                                key={tl.id}\r\n                                                todolistId={tl.id}\r\n                                                title={tl.title}\r\n                                                filter={tl.filter}\r\n                                                newArrTasks={newArrTasks}\r\n                                                removeTodolist={removeTodolist}\r\n                                                changeTodolistTitle={changeTodolistTitle}\r\n                                            />\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from \"./tasksReducer/tasksReducer\";\r\nimport {todolistReducer} from \"./todolistsReducer/todolistsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport AppWithRedux from './AppWithRedux'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from \"./store/store\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n"],"sourceRoot":""}