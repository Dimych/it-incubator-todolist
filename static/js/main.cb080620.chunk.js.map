{"version":3,"sources":["components/Todolist.module.css","components/ChangedSpanIntoInput.tsx","components/TodolistHeader.tsx","components/AddForm.tsx","components/Todolist.tsx","App.tsx","index.tsx"],"names":["module","exports","ChangedSpanIntoInput","props","useState","editMod","setEditMod","value","setValue","TextField","id","size","onBlur","changeItemText","onChange","e","currentTarget","autoFocus","onDoubleClick","title","TodolistHeader","className","s","todolistHeader","todolistTitle","newTitle","todolistId","changeTodolistTitle","onChangeTitleText","IconButton","aria-label","onClick","removeTodolist","color","AddForm","inputValue","setInputValue","error","setError","taskInput","label","variant","trim","onKeyPress","key","addNewItem","Boolean","addTask","style","padding","Todolist","todolist","addNewTask","tasks","newArrTasks","map","t","task","isDone","taskCheckbox","type","checked","onCheckedBox","onClickCheckBox","taskTitle","taskId","changeTaskTitleText","onChangeTaskTitleText","taskBtn","removeTask","filterButtons","Button","changeFilter","filter","margin","width","fontSize","App","todolistID1","v1","todolistID2","todolistID3","todolistID4","todolists","setTodolists","setTasks","ourTodolist","find","ourTodolists","newTasksArrWithoutTask","newTask","ourTodolistWithNewTask","ourTask","checkedTask","AppBar","position","Toolbar","edge","Menu","Typography","Container","Grid","container","newTodolist","addNewTodolist","tl","item","Paper","elevation","ReactDOM","render","document","getElementById"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,UAAY,4BAA4B,aAAe,+BAA+B,UAAY,4BAA4B,MAAQ,wBAAwB,mBAAqB,qCAAqC,aAAe,+BAA+B,eAAiB,iCAAiC,cAAgB,kC,mOCQvZ,SAASC,EAAqBC,GAAuC,IAAD,EAC3CC,oBAAS,GADkC,mBAClEC,EADkE,KACzDC,EADyD,OAE/CF,mBAAS,IAFsC,mBAElEG,EAFkE,KAE3DC,EAF2D,KAiBvE,OACI,6BACKH,EACK,kBAACI,EAAA,EAAD,CAAWC,GAAG,sBACDC,KAAK,QACLC,OAbR,WACfN,GAAW,GACXH,EAAMU,eAAeN,IAYEA,MAAOA,EACPO,SAVD,SAACC,GACvBP,EAASO,EAAEC,cAAcT,QAS2BU,WAAS,IACnD,yBAAKC,cArBD,WACdZ,GAAW,GACXE,EAASL,EAAMgB,SAmB2BhB,EAAMgB,Q,8BCnBjD,SAASC,EAAejB,GAS3B,OACI,yBAAKkB,UAAWC,IAAEC,gBACd,yBAAKF,UAAWC,IAAEE,eACd,kBAACtB,EAAD,CAAsBiB,MAAOhB,EAAMgB,MAAON,eAAgB,SAACY,IAN/C,SAACA,EAAkBC,GACvCvB,EAAMwB,oBAAoBF,EAAUC,GAMxBE,CAAkBH,EAAUtB,EAAMuB,gBAI1C,6BACI,kBAACG,EAAA,EAAD,CAAYC,aAAW,SAASC,QAhBvB,WACjB5B,EAAM6B,eAAe7B,EAAMuB,cAgBf,kBAAC,IAAD,CAAYO,MAAO,iB,8BCzBhC,SAASC,EAAQ/B,GAAwB,MAEVC,mBAAiB,IAFP,mBAEvC+B,EAFuC,KAE3BC,EAF2B,OAGpBhC,mBAAwB,IAHJ,mBAGvCiC,EAHuC,KAGhCC,EAHgC,KAiC5C,OACI,yBAAKjB,UAAWC,IAAEiB,WACd,kBAAC9B,EAAA,EAAD,CAAWC,GAAG,6BACH8B,MAAOH,EAAQ,QAAU,WACzBI,QAAQ,WACRR,MAAO,YACP1B,MAAO4B,EACPrB,SArBC,SAACC,GACjBoB,EAAWO,QAAUJ,EAAS,MAC9BF,EAAcrB,EAAEC,cAAcT,QAoBfoC,WAjBA,SAAC5B,GAEhBuB,EAAS,MACLH,EAAWO,QAAoB,UAAV3B,EAAE6B,MACvBzC,EAAM0C,WAAWV,GACjBC,EAAc,MAcHC,MAAOS,QAAQT,KAG1B,kBAACR,EAAA,EAAD,CAAaE,QAhCN,YARD,SAACI,GACPA,EAAWO,QACXvC,EAAM0C,WAAWV,GACjBC,EAAc,KAEdE,EAAS,qBAIbS,CAAQZ,KAgCA,kBAAC,IAAD,CAA6BF,MAAO,UAAWe,MAAO,CAACC,QAAS,UAEnEZ,EAAQ,yBAAKhB,UAAWC,IAAEe,OAAlB,IAA2BA,EAA3B,KAA2C,MClCzD,SAASa,EAAS/C,GAuBrB,OACI,yBAAKkB,UAAWC,IAAE6B,UACd,6BACI,kBAAC/B,EAAD,CAAgBD,MAAOhB,EAAMgB,MAAOO,WAAYvB,EAAMuB,WAAYM,eAAgB7B,EAAM6B,eACxEL,oBAAqBxB,EAAMwB,sBAC3C,kBAACO,EAAD,CAAUW,WARH,SAACV,GAChBhC,EAAMiD,WAAWjB,EAAYhC,EAAMuB,eAS3B,yBAAKL,UAAWC,IAAE+B,OACblD,EAAMmD,YAAYC,KAAI,SAAAC,GAAC,OACpB,yBAAKZ,IAAKY,EAAE9C,GAAIW,UAAS,UAAKC,IAAEmC,KAAP,cAAiBD,EAAEE,OAASpC,IAAEqC,aAAe,KAClE,6BACI,2BAAOC,KAAK,WAAWC,QAASL,EAAEE,OAAQ3B,QAAS,SAAChB,IAhC1D,SAACA,EAAYL,GAC/BP,EAAM2D,aAAapD,EAAIK,EAAGZ,EAAMuB,YAgCJqC,CAAgBhD,EAAEC,cAAc6C,QAASL,EAAE9C,QAGnD,yBAAKW,UAAWC,IAAE0C,WACd,kBAAC9D,EAAD,CAAsBiB,MAAOqC,EAAErC,MAAON,eAAgB,SAACY,IAvBrD,SAACwC,EAAgBxC,EAAkBC,GAC7DvB,EAAM+D,oBAAoBD,EAAQxC,EAAUtB,EAAMuB,YAuBtByC,CAAsBX,EAAE9C,GAAIe,EAAUtB,EAAMuB,gBAGpD,yBAAKL,UAAWC,IAAE8C,SAGd,kBAACvC,EAAA,EAAD,CAAYC,aAAW,SAASC,QAAS,WAAO5B,EAAMkE,WAAWb,EAAE9C,GAAIP,EAAMuB,cACzE,kBAAC,IAAD,cAQxB,yBAAKL,UAAWC,IAAEgD,eACd,kBAACC,EAAA,EAAD,CAAQxC,QAlDF,WACd5B,EAAMqE,aAAa,MAAOrE,EAAMuB,aAkDhBe,QAA0B,QAAjBtC,EAAMsE,OAAmB,WAAa,YAC/C9D,KAAM,QACNqC,MAAO,CAAC0B,OAAQ,MAAOC,MAAO,OAAQC,SAAU,SAHxD,QAIA,kBAACL,EAAA,EAAD,CAAQxC,QAnDC,WACjB5B,EAAMqE,aAAa,SAAUrE,EAAMuB,aAmDnBe,QAA2B,WAAjBtC,EAAMsE,OAAsB,WAAa,YACnD9D,KAAM,QACNqC,MAAO,CAAC0B,OAAQ,MAAOC,MAAO,OAAQC,SAAU,SAHxD,UAIA,kBAACL,EAAA,EAAD,CAAQxC,QApDI,WACpB5B,EAAMqE,aAAa,YAAarE,EAAMuB,aAoDtBe,QAA0B,cAAjBtC,EAAMsE,OAAyB,WAAa,YACrD9D,KAAM,QACNqC,MAAO,CAAC0B,OAAQ,MAAOC,MAAO,OAAQC,SAAU,SAHxD,e,2EC8GDC,MAlLf,WAAgB,IAAD,EAELC,EAAcC,cACdC,EAAcD,cACdE,EAAcF,cACdG,EAAcH,cALT,EAOqB3E,mBAA8B,CAC1D,CAACM,GAAIoE,EAAa3D,MAAO,uBAAwBsD,OAAQ,OACzD,CAAC/D,GAAIsE,EAAa7D,MAAO,QAASsD,OAAQ,OAC1C,CAAC/D,GAAIuE,EAAa9D,MAAO,KAAMsD,OAAQ,OACvC,CAAC/D,GAAIwE,EAAa/D,MAAO,SAAUsD,OAAQ,SAXpC,mBAONU,EAPM,KAOKC,EAPL,OAcahF,oBAAQ,mBAC3B0E,EAAc,CACX,CAACpE,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,YAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,SACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,MAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,oBAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,kBAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,YACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,aACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,sBATT,cAW3B6D,EAAc,CACX,CAACtE,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,uEAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,gIACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,iBACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,oBAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,mBAhBT,cAkB3B8D,EAAc,CACX,CAACvE,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,gBAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,aACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,WACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,sBAChC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,iBACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,QAxBT,cA0B3B+D,EAAc,CACX,CAACxE,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,mBACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAO,WACjC,CAACT,GAAIqE,cAAMrB,QAAQ,EAAMvC,MAAO,kBA7BR,IAdrB,mBAcNkC,EAdM,KAcCgC,EAdD,KA0DL1D,EAAsB,SAACR,EAAeO,GACxC,IAAI4D,EAAcH,EAAUI,MAAK,SAAA/B,GAAC,OAAIA,EAAE9C,KAAOgB,KAC3C4D,IACAA,EAAYnE,MAAQA,GAExBkE,EAAS,eAAIhC,KAGXrB,EAAiB,SAACN,GACpB,IAAI8D,EAAeL,EAAUV,QAAO,SAAAjB,GAAC,OAAIA,EAAE9C,KAAOgB,KAClD0D,EAAaI,IAIXnB,EAAa,SAACJ,EAAgBvC,GAChC,IACI+D,EADmBpC,EAAM3B,GACiB+C,QAAO,SAACjB,GAAD,OAAOA,EAAE9C,KAAOuD,KACrEZ,EAAM3B,GAAc+D,EACpBJ,EAAS,eAAIhC,KAGXD,EAAa,SAACjB,EAAoBT,GACpC,IAAIgE,EAAU,CAAChF,GAAIqE,cAAMrB,QAAQ,EAAOvC,MAAOgB,GAC3CmD,EAAcjC,EAAM3B,GACpBiE,EAAsB,CAAID,GAAJ,mBAAgBJ,IAC1CjC,EAAM3B,GAAciE,EACpBN,EAAS,eAAIhC,KAEXa,EAAsB,SAACD,EAAgBxC,EAAkBC,GAC3D,IACIkE,EADcvC,EAAM3B,GACE6D,MAAK,SAAA/B,GAAC,OAAIA,EAAE9C,KAAOuD,KACzC2B,IACAA,EAAQzE,MAAQM,GAEpB4D,EAAS,eAAIhC,KAGXS,EAAe,SAACpD,EAAYH,EAAgBmB,GAC9C,IACImE,EADcxC,EAAM3B,GACM6D,MAAK,SAAA/B,GAAC,OAAIA,EAAE9C,KAAOA,KAC7CmF,IACAA,EAAYnC,OAASnD,GAEzB8E,EAAS,eAAIhC,KAKXmB,EAAe,SAACjE,EAAyBmB,GAC3C,IAAI4D,EAAcH,EAAUI,MAAK,SAAA/B,GAAC,OAAIA,EAAE9C,KAAOgB,KAC3C4D,IACAA,EAAYb,OAASlE,GAEzB8E,EAAS,eAAIhC,KAGjB,OAGI,yBAAKhC,UAAU,OACX,kBAACyE,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACnE,EAAA,EAAD,CAAYoE,KAAK,QAAQhE,MAAM,UAAUH,aAAW,QAChD,kBAACoE,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY1D,QAAQ,MAApB,KACA,kBAAC8B,EAAA,EAAD,CAAQtC,MAAM,WAAd,OAGR,kBAACmE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACtD,MAAO,CAACC,QAAS,SAC7B,yBAAK5B,UAAU,eACX,yBAAKA,UAAU,oBAAf,qBACA,kBAACa,EAAD,CAASW,WAAY,SAACV,IAlFnB,SAACA,GACpB,IAAIoE,EAA4B,CAAC7F,GAAIqE,cAAM5D,MAAOgB,EAAYsC,OAAQ,OACtEW,EAAa,CAACmB,GAAF,mBAAkBpB,KAC9BE,EAAS,2BACFhC,GADC,kBAEHkD,EAAY7F,GAAK,MA8EF8F,CAAerE,QAK3B,kBAACkE,EAAA,EAAD,CAAMC,WAAS,GACX,yBAAKjF,UAAU,gBAEP8D,EAAU5B,KAAI,SAAAkD,GACV,IAAInD,EAAcD,EAAMoD,EAAG/F,IAO3B,MANkB,WAAd+F,EAAGhC,SACHnB,EAAcD,EAAMoD,EAAG/F,IAAI+D,QAAO,SAAAjB,GAAC,OAAKA,EAAEE,WAE5B,cAAd+C,EAAGhC,SACHnB,EAAcD,EAAMoD,EAAG/F,IAAI+D,QAAO,SAAAjB,GAAC,OAAIA,EAAEE,WAGzC,kBAAC2C,EAAA,EAAD,CAAMK,MAAI,GACN,kBAACC,EAAA,EAAD,CAAOC,UAAW,GACd,kBAAC1D,EAAD,CACIN,IAAK6D,EAAG/F,GACRgB,WAAY+E,EAAG/F,GACfS,MAAOsF,EAAGtF,MACVsD,OAAQgC,EAAGhC,OACXnB,YAAaA,EACbe,WAAYA,EACZG,aAAcA,EACdpB,WAAYA,EACZpB,eAAgBA,EAChB8B,aAAcA,EACdnC,oBAAqBA,EACrBuC,oBAAqBA,cCjLrE2C,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.cb080620.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__26CC-\",\"task\":\"Todolist_task__195Hy\",\"taskInput\":\"Todolist_taskInput__2Uarg\",\"taskCheckbox\":\"Todolist_taskCheckbox__2QD_y\",\"taskTitle\":\"Todolist_taskTitle__14X27\",\"error\":\"Todolist_error__1fk_l\",\"arrayInputAddTasks\":\"Todolist_arrayInputAddTasks__3XxiU\",\"activeButton\":\"Todolist_activeButton__1Kb_V\",\"todolistHeader\":\"Todolist_todolistHeader__1uR9e\",\"todolistTitle\":\"Todolist_todolistTitle__17Yfi\"};","import React, {ChangeEvent, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\"\r\nimport s from \"./Todolist.module.css\";\r\n\r\ntype ChangedSpanIntoInputPropsType = {\r\n    title: string\r\n    changeItemText: (value: string) => void\r\n}\r\n\r\nexport function ChangedSpanIntoInput(props: ChangedSpanIntoInputPropsType) {\r\n    let [editMod, setEditMod] = useState(false)\r\n    let [value, setValue] = useState('')\r\n    //----ON-------\r\n    const editModOn = () => {\r\n        setEditMod(true)\r\n        setValue(props.title)\r\n    }\r\n    //----OFF-----\r\n    const editModOff = () => {\r\n        setEditMod(false)\r\n        props.changeItemText(value)\r\n    }\r\n    //-----input------\r\n    const onChangeInputText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {editMod\r\n                ? <TextField id=\"standard-size-small\"\r\n                               size=\"small\"\r\n                               onBlur={editModOff}\r\n                               value={value}\r\n                               onChange={onChangeInputText} autoFocus/>\r\n                : <div onDoubleClick={editModOn}>{props.title}</div>\r\n            }\r\n        </div>\r\n    )\r\n}","import s from \"./Todolist.module.css\"\r\nimport {ChangedSpanIntoInput} from \"./ChangedSpanIntoInput\"\r\nimport React from \"react\"\r\nimport AddCircleOutlineTwoToneIcon from \"@material-ui/icons/AddCircleOutlineTwoTone\";\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport HighlightOffTwoToneIcon from '@material-ui/icons/HighlightOffTwoTone';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function TodolistHeader(props: TodolistHeaderPropsType) {\r\n    //--------delete todolist---------\r\n    let deleteTodolist = () => {\r\n        props.removeTodolist(props.todolistId)\r\n    }\r\n    //--------change title of todolist ---------\r\n    let onChangeTitleText = (newTitle: string, todolistId: string) => {\r\n        props.changeTodolistTitle(newTitle, todolistId)\r\n    }\r\n    return (\r\n        <div className={s.todolistHeader}>\r\n            <div className={s.todolistTitle}>\r\n                <ChangedSpanIntoInput title={props.title} changeItemText={(newTitle) => {\r\n                    onChangeTitleText(newTitle, props.todolistId)\r\n                }}/>\r\n            </div>\r\n\r\n            <div>\r\n                <IconButton aria-label=\"delete\" onClick={deleteTodolist}>\r\n                    <DeleteIcon color={\"secondary\"}/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./Todolist.module.css\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleOutlineTwoToneIcon from \"@material-ui/icons/AddCircleOutlineTwoTone\";\r\n\r\ntype AddFormPropsType = {\r\n    addNewItem: (inputValue: string) => void\r\n}\r\nexport function AddForm(props: AddFormPropsType){\r\n    //data\r\n    let [inputValue, setInputValue] = useState<string>('')\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n//-----------add task------------\r\n    let addTask = (inputValue: string) => {\r\n        if (inputValue.trim()) {\r\n            props.addNewItem(inputValue)\r\n            setInputValue('')\r\n        } else {\r\n            setError('field is required')\r\n        }\r\n    }\r\n    let addTasks = () => {\r\n        addTask(inputValue)\r\n    }\r\n\r\n//-------------input-------------\r\n    let onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        inputValue.trim() && setError(null)\r\n        setInputValue(e.currentTarget.value)\r\n\r\n    }\r\n    let addInputText = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\r\n        setError(null)\r\n        if (inputValue.trim() && e.key === 'Enter') {\r\n            props.addNewItem(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={s.taskInput}>\r\n            <TextField id=\"outlined-error-helper-text\"\r\n                       label={error ? \"error\" : \"new task\"}\r\n                       variant=\"outlined\"\r\n                       color={'secondary'}\r\n                       value={inputValue}\r\n                       onChange={onInputChange}\r\n                       onKeyPress={addInputText}\r\n                //className={error ? s.arrayInputAddTasks : ''}//\r\n                       error={Boolean(error)}\r\n\r\n            />\r\n            <IconButton  onClick={addTasks}>\r\n                <AddCircleOutlineTwoToneIcon color={\"primary\"} style={{padding: '0px'}}/>\r\n            </IconButton >\r\n            {error ? <div className={s.error}> {error} </div> : null}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {FilterValuesType, TasksType} from \"../App\"\r\nimport s from './Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from \"./ChangedSpanIntoInput\"\r\nimport {TodolistHeader} from \"./TodolistHeader\"\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport {Button} from \"@material-ui/core\"\r\nimport { AddForm } from \"./AddForm\"\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    newArrTasks: Array<TasksType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addNewTask: (inputValue: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    onCheckedBox: (id: string, value: boolean, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    changeTaskTitleText: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    let onClickCheckBox = (e: boolean, id: string) => {\r\n        props.onCheckedBox(id, e, props.todolistId)\r\n    }\r\n//-----------filter------------\r\n    let onFilterAll = () => {\r\n        props.changeFilter('all', props.todolistId)\r\n    }\r\n    let onFilterActive = () => {\r\n        props.changeFilter('active', props.todolistId)\r\n    }\r\n    let onFilterCompleted = () => {\r\n        props.changeFilter('completed', props.todolistId)\r\n    }\r\n//------------title------------\r\n    const onChangeTaskTitleText = (taskId: string, newTitle: string, todolistId: string) => {\r\n        props.changeTaskTitleText(taskId, newTitle, props.todolistId)\r\n    }\r\n    //----add tasks---\r\n    const addNewTask = (inputValue: string) => {\r\n        props.addNewTask(inputValue, props.todolistId)\r\n    }\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div>\r\n                <TodolistHeader title={props.title} todolistId={props.todolistId} removeTodolist={props.removeTodolist}\r\n                                changeTodolistTitle={props.changeTodolistTitle}/>\r\n                <AddForm  addNewItem={addNewTask}/>\r\n\r\n                <div className={s.tasks}>\r\n                    {props.newArrTasks.map(t =>\r\n                        <div key={t.id} className={`${s.task} + ${t.isDone ? s.taskCheckbox : ''}`}>\r\n                            <div>\r\n                                <input type=\"checkbox\" checked={t.isDone} onClick={(e) => {\r\n                                    onClickCheckBox(e.currentTarget.checked, t.id)\r\n                                }}/>\r\n                            </div>\r\n                            <div className={s.taskTitle}>\r\n                                <ChangedSpanIntoInput title={t.title} changeItemText={(newTitle) => {\r\n                                    onChangeTaskTitleText(t.id, newTitle, props.todolistId)\r\n                                }}/>\r\n                            </div>\r\n                            <div className={s.taskBtn}>\r\n                                {/*<button onClick={() => { props.removeTask(t.id, props.todolistId)}}>X</button>*/}\r\n\r\n                                <IconButton aria-label=\"delete\" onClick={() => {props.removeTask(t.id, props.todolistId) }}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n\r\n                            </div>\r\n                        </div>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onFilterAll}\r\n                        variant={props.filter === 'all' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}> All</Button>\r\n                <Button onClick={onFilterActive}\r\n                        variant ={props.filter === 'active' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Active</Button>\r\n                <Button onClick={onFilterCompleted}\r\n                        variant={props.filter === 'completed' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './components/Todolist'\r\nimport {v1} from \"uuid\";\r\nimport {AddForm} from \"./components/AddForm\";\r\nimport {AppBar, Button, IconButton, Toolbar, Typography, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolistID1 = v1()\r\n    const todolistID2 = v1()\r\n    const todolistID3 = v1()\r\n    const todolistID4 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistID1, title: 'What I want to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'React', filter: 'all'},\r\n        {id: todolistID3, title: 'JS', filter: 'all'},\r\n        {id: todolistID4, title: 'Useful', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), isDone: true, title: 'HTML/CSS'},\r\n            {id: v1(), isDone: false, title: 'React'},\r\n            {id: v1(), isDone: true, title: 'JS'},\r\n            {id: v1(), isDone: true, title: 'tasks from Ignat'},\r\n            {id: v1(), isDone: true, title: 'Social Network'},\r\n            {id: v1(), isDone: false, title: 'CodeWars'},\r\n            {id: v1(), isDone: false, title: 'Native JS'},\r\n            {id: v1(), isDone: false, title: 'React/TypeScript'}\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), isDone: true, title: 'Путь самурая'},\r\n            {id: v1(), isDone: false, title: 'Реакт- кабзда как просто'},\r\n            {id: v1(), isDone: false, title: 'SocialNetwork'},\r\n            {id: v1(), isDone: true, title: 'Tasks from Ignat'},\r\n            {id: v1(), isDone: false, title: 'documentation'}\r\n        ],\r\n        [todolistID3]: [\r\n            {id: v1(), isDone: true, title: 'Codewars.com'},\r\n            {id: v1(), isDone: false, title: 'native JS'},\r\n            {id: v1(), isDone: false, title: 'code.mu'},\r\n            {id: v1(), isDone: true, title: 'lessons on Sundays'},\r\n            {id: v1(), isDone: false, title: 'documentation'},\r\n            {id: v1(), isDone: false, title: 'x3'}\r\n        ],\r\n        [todolistID4]: [\r\n            {id: v1(), isDone: false, title: 'task from Ignat'},\r\n            {id: v1(), isDone: false, title: 'code.mu'},\r\n            {id: v1(), isDone: true, title: 'Codewars.com'}\r\n        ]\r\n    })\r\n\r\n//-----------todolists---------\r\n\r\n    const addNewTodolist = (inputValue: string) => {\r\n        let newTodolist: TodolistType = {id: v1(), title: inputValue, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolist.id]: []\r\n        })\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string, todolistId: string) => {\r\n        let ourTodolist = todolists.find(t => t.id === todolistId)\r\n        if (ourTodolist) {\r\n            ourTodolist.title = title\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        let ourTodolists = todolists.filter(t => t.id !== todolistId)\r\n        setTodolists(ourTodolists)\r\n    }\r\n\r\n//------------tasks------------\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n        let tasksForTodolist = tasks[todolistId]\r\n        let newTasksArrWithoutTask = tasksForTodolist.filter((t) => t.id !== taskId)\r\n        tasks[todolistId] = newTasksArrWithoutTask\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addNewTask = (inputValue: string, todolistId: string) => {\r\n        let newTask = {id: v1(), isDone: false, title: inputValue}\r\n        let ourTodolist = tasks[todolistId]\r\n        let ourTodolistWithNewTask = [newTask, ...ourTodolist]\r\n        tasks[todolistId] = ourTodolistWithNewTask\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitleText = (taskId: string, newTitle: string, todolistId: string) => {\r\n        let ourTodolist = tasks[todolistId]\r\n        let ourTask = ourTodolist.find(t => t.id === taskId)\r\n        if (ourTask) {\r\n            ourTask.title = newTitle\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n//-----------checkBox------------\r\n    const onCheckedBox = (id: string, value: boolean, todolistId: string) => {\r\n        let ourTodolist = tasks[todolistId]\r\n        let checkedTask = ourTodolist.find(t => t.id === id)\r\n        if (checkedTask) {\r\n            checkedTask.isDone = value\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n//----------filterValue-------\r\n\r\n    const changeFilter = (value: FilterValuesType, todolistId: string) => {\r\n        let ourTodolist = todolists.find(t => t.id === todolistId)\r\n        if (ourTodolist) {\r\n            ourTodolist.filter = value\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className='app'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"> </Typography>\r\n                    <Button color=\"inherit\"> </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <div className=\"addTodolist\">\r\n                        <div className='addTodolistTitle'>Add new TodoList:</div>\r\n                        <AddForm addNewItem={(inputValue) => {\r\n                            addNewTodolist(inputValue)\r\n                        }}/>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                    <div className=\"allTodolists\">\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let newArrTasks = tasks[tl.id]\r\n                                if (tl.filter === 'active') {\r\n                                    newArrTasks = tasks[tl.id].filter(t => !t.isDone)\r\n                                }\r\n                                if (tl.filter === 'completed') {\r\n                                    newArrTasks = tasks[tl.id].filter(t => t.isDone)\r\n                                }\r\n                                return (\r\n                                    <Grid item>\r\n                                        <Paper elevation={5}>\r\n                                            <Todolist\r\n                                                key={tl.id}\r\n                                                todolistId={tl.id}\r\n                                                title={tl.title}\r\n                                                filter={tl.filter}\r\n                                                newArrTasks={newArrTasks}\r\n                                                removeTask={removeTask}\r\n                                                changeFilter={changeFilter}\r\n                                                addNewTask={addNewTask}\r\n                                                removeTodolist={removeTodolist}\r\n                                                onCheckedBox={onCheckedBox}\r\n                                                changeTodolistTitle={changeTodolistTitle}\r\n                                                changeTaskTitleText={changeTaskTitleText}\r\n                                            />\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n"],"sourceRoot":""}