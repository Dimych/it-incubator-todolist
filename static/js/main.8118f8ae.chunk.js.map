{"version":3,"sources":["api/api.tsx","features/TodolistsList/tasksReducer.ts","features/TodolistsList/todolistsReducer.ts","components/AddForm/AddForm.tsx","components/ChangedSpanIntoInput/ChangedSpanIntoInput.tsx","components/TodolistHeader/TodolistHeader.tsx","components/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx","features/TodolistsList/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","ActionsTypes","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","then","res","data","title","post","todolistID","delete","todolistId","put","tasksApi","taskId","model","initialState","changeTodolistFilterValueAC","id","newFilterValue","type","AddForm","React","memo","addNewItem","useState","inputValue","setInputValue","error","setError","addTask","useCallback","trim","className","s","taskInput","TextField","label","variant","color","value","onChange","e","currentTarget","onKeyPress","key","Boolean","IconButton","onClick","style","padding","ChangedSpanIntoInput","changeItemText","editMod","setEditMod","setValue","editModOn","editModOff","size","onBlur","autoFocus","onDoubleClick","TodolistHeader","removeTodolist","changeTodolistTitle","deleteTodolist","onChangeTitleText","newTitle","todolistHeader","todolistTitle","aria-label","actions","task","ADD_TASK","REMOVE_TASK","CHANGE_TASK_TITLE","status","CHANGE_CHECKED_STATUS","tasks","SET_TASKS","Task","dispatch","useDispatch","Completed","New","taskCheckbox","checked","taskID","getState","find","t","console","warn","Error","deadline","description","priority","startDate","taskTitle","taskBtn","Todolist","filter","newArrTasks","useEffect","items","allTasks","onFilterAll","onFilterActive","onFilterCompleted","addNewTask","item","addTaskTC","todolist","map","filterButtons","Button","margin","width","fontSize","TodolistsList","todolists","useSelector","state","addNewTodolist","changeTodolistTitleTC","Grid","container","tl","Paper","elevation","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8118f8ae.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype ResponseType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\ntype ResponseGetTaskType = {\r\n    error: string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\n\r\nconst model = {\r\n    title: '',\r\n    description: 'description',\r\n    status: 1,\r\n    priority: 1,\r\n    startDate: '11.12.2020',\r\n    deadline: '12.12.2020',\r\n}\r\n\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4ecc4fdb-da6b-45f9-bb99-93bccea55cd4'\r\n    }\r\n})\r\n\r\nexport const todolistsApi = {\r\n    authMe: () => {\r\n        return instance.get<ResponseType<AuthDataType>>('auth/me').then(res => res.data)\r\n    },\r\n    getTodolists: () => {\r\n        return instance.get<Array<TodolistsType>>('todo-lists').then(res => res.data)\r\n    },\r\n    createTodolist: (title: string) => {\r\n        return instance.post<ResponseType<{ item: TodolistsType }>>('todo-lists', {title}).then(res => res.data)\r\n    },\r\n    deleteTodolist: (todolistID: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\r\n    },\r\n    changeTodolistTitle: (todolistId: string, title: string) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksApi = {\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<ResponseGetTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: ModelType) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, {...model})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}","import {\r\n    ADD_TODOLIST, addTodolistAC,\r\n    REMOVE_TODOLIST, removeTodolistAC,\r\n    SET_TODOLISTS, setTodolistsAC\r\n} from './todolistsReducer'\r\nimport {ModelType, tasksApi, TaskStatuses, TaskType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\nconst initialState: TasksType = {}\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ActionsTypes.ADD_TASK:\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case ActionsTypes.REMOVE_TASK:\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n        case ActionsTypes.CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, title: action.newTitle} : task)\r\n            }\r\n        case ActionsTypes.CHANGE_CHECKED_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, status: action.status} : task)\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.todolist.id]: []}\r\n        case REMOVE_TODOLIST: {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case SET_TODOLISTS: {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case ActionsTypes.SET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const actions = {\r\n    addNewTaskAC: (task: TaskType) =>\r\n        ({type: ActionsTypes.ADD_TASK, task} as const),\r\n    removeTaskAC: (todolistId: string, taskId: string) =>\r\n        ({type: ActionsTypes.REMOVE_TASK, todolistId, taskId} as const),\r\n    changeTaskTitleTextAC: (todolistId: string, taskId: string, newTitle: string) =>\r\n        ({type: ActionsTypes.CHANGE_TASK_TITLE, todolistId, taskId, newTitle} as const),\r\n    changeCheckedStatusAC: (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n        ({type: ActionsTypes.CHANGE_CHECKED_STATUS, todolistId, taskId, status} as const),\r\n    setTasksAC: (todolistId: string, tasks: Array<TaskType>) =>\r\n        ({type: ActionsTypes.SET_TASKS, todolistId, tasks} as const),\r\n}\r\n\r\n// thunks\r\nexport const setTasksTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksApi.getTasks(todolistID)\r\n        .then(res => {\r\n            dispatch(actions.setTasksAC(todolistID, res.data.items))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksApi.createTask(todolistID, title)\r\n        .then(res => {\r\n            dispatch(actions.addNewTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksApi.deleteTask(todolistID, taskID)\r\n        .then(res => {\r\n            dispatch(actions.removeTaskAC(todolistID, taskID))\r\n        })\r\n}\r\nexport const changeTaskTitleTC = (todolistID: string, taskID: string, title: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            throw new Error('task not found in the state')\r\n            return\r\n        }\r\n        const model: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: title\r\n        }\r\n\r\n        tasksApi.updateTask(todolistID, taskID, model)\r\n            .then(res => {\r\n                dispatch(actions.changeTaskTitleTextAC(todolistID, taskID, title))\r\n            })\r\n    }\r\nexport const changeTaskCheckedTC = (todolistID: string, taskID: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            throw new Error('task not found in the state')\r\n            return\r\n        }\r\n        const model: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: status,\r\n            title: task.title\r\n        }\r\n        tasksApi.updateTask(todolistID, taskID, model)\r\n            .then(res => {\r\n                dispatch(actions.changeCheckedStatusAC(todolistID, taskID, status))\r\n            })\r\n    }\r\n\r\n// types\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never\r\ntype ActionsType = ReturnType<ActionType<typeof actions>>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nexport enum ActionsTypes {\r\n    ADD_TASK = 'ADD_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE',\r\n    CHANGE_CHECKED_STATUS = 'CHANGE_CHECKED_STATUS',\r\n    SET_TASKS = 'SET_TASKS'\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}","import {todolistsApi, TodolistsType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\n// variables\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\nconst CHANGE_TODOLIST_FILTER_VALUE = 'CHANGE_TODOLIST_FILTER_VALUE'\r\nexport const SET_TODOLISTS = 'SET_TODOLISTS'\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState,\r\n                                action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case REMOVE_TODOLIST:\r\n            return [...state.filter(t => t.id !== action.id)]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.newTitle} : tl)\r\n        case CHANGE_TODOLIST_FILTER_VALUE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.newFilterValue} : tl)\r\n        case SET_TODOLISTS: {\r\n            return action.todolists.map(todolist => {\r\n                return {...todolist, filter: 'all'}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addTodolistAC = (todolist: TodolistsType) =>\r\n    ({type: ADD_TODOLIST, todolist} as const)\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: REMOVE_TODOLIST, id} as const)\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) =>\r\n    ({type: CHANGE_TODOLIST_TITLE, id, newTitle} as const)\r\nexport const changeTodolistFilterValueAC = (id: string, newFilterValue: FilterValuesType) =>\r\n    ({type: CHANGE_TODOLIST_FILTER_VALUE, id, newFilterValue} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistsType>) =>\r\n    ({type: SET_TODOLISTS, todolists} as const)\r\n\r\n// thunks\r\nexport const setTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res))\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsApi.deleteTodolist(todolistID)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistID))\r\n        })\r\n}\r\nexport const addNewTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsApi.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.item))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsApi.changeTodolistTitle(todolistID, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistID, title))\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistsType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterValueAC>\r\n    | ReturnType<typeof setTodolistsAC>","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {TextField} from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AddCircleOutlineTwoToneIcon from '@material-ui/icons/AddCircleOutlineTwoTone'\r\n\r\nexport type AddFormPropsType = {\r\n    addNewItem: (inputValue: string) => void\r\n}\r\nexport const AddForm: React.FC<AddFormPropsType> = React.memo(({addNewItem}) => {\r\n    let [inputValue, setInputValue] = useState<string>('')\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n    let addTask = useCallback((inputValue: string) => {\r\n        if (inputValue.trim()) {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        } else {\r\n            setError('field is required')\r\n        }\r\n    }, [addNewItem])\r\n\r\n\r\n    let onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        inputValue.trim() && setError(null)\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    let addInputText = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (inputValue.trim() && e.key === 'Enter') {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskInput}>\r\n            <TextField id=\"outlined-error-helper-text\"\r\n                       label={error ? 'error' : 'new task'}\r\n                       variant=\"outlined\"\r\n                       color={'secondary'}\r\n                       value={inputValue}\r\n                       onChange={onInputChange}\r\n                       onKeyPress={addInputText}\r\n                       error={Boolean(error)}\r\n            />\r\n            <IconButton onClick={() => addTask(inputValue)}>\r\n                <AddCircleOutlineTwoToneIcon color={'primary'} style={{padding: '0px'}}/>\r\n            </IconButton>\r\n            {error ? <div className={s.error}> {error} </div> : null}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\nexport type ChangedSpanIntoInputPropsType = {\r\n    title: string\r\n    changeItemText: (value: string) => void\r\n}\r\n\r\nexport const ChangedSpanIntoInput: React.FC<ChangedSpanIntoInputPropsType> = React.memo(({title, changeItemText}) => {\r\n    let [editMod, setEditMod] = useState(false)\r\n    let [value, setValue] = useState('')\r\n    //----ON-------\r\n    const editModOn = useCallback(() => {\r\n        setEditMod(true)\r\n        setValue(title)\r\n    }, [title])\r\n    //----OFF-----\r\n    const editModOff = useCallback(() => {\r\n        setEditMod(false)\r\n        changeItemText(value)\r\n    }, [changeItemText, value])\r\n    //-----input------\r\n    const onChangeInputText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMod\r\n                ? <TextField id=\"standard-size-small\"\r\n                             size=\"small\"\r\n                             onBlur={editModOff}\r\n                             value={value}\r\n                             onChange={onChangeInputText} autoFocus/>\r\n                : <div onDoubleClick={editModOn}>{title}</div>\r\n            }\r\n        </div>\r\n    )\r\n})","import s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from '../ChangedSpanIntoInput/ChangedSpanIntoInput'\r\nimport React, {useCallback} from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = React.memo(\r\n    ({removeTodolist, changeTodolistTitle, title, todolistId}) => {\r\n        let deleteTodolist = useCallback(() => {\r\n            removeTodolist(todolistId)\r\n        }, [removeTodolist, todolistId])\r\n\r\n        let onChangeTitleText = useCallback((newTitle: string, todolistId: string) => {\r\n            changeTodolistTitle(newTitle, todolistId)\r\n        }, [changeTodolistTitle])\r\n        return (\r\n            <div className={s.todolistHeader}>\r\n                <div className={s.todolistTitle}>\r\n                    <ChangedSpanIntoInput title={title} changeItemText={(newTitle) => {\r\n                        onChangeTitleText(newTitle, todolistId)\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <IconButton aria-label=\"delete\" onClick={deleteTodolist}>\r\n                        <DeleteIcon color={'secondary'}/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    })","import {useDispatch} from 'react-redux'\r\nimport {actions, changeTaskCheckedTC, changeTaskTitleTC, deleteTaskTC} from '../../features/TodolistsList/tasksReducer'\r\nimport s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from '../ChangedSpanIntoInput/ChangedSpanIntoInput'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport React, {useCallback} from 'react'\r\nimport {TaskStatuses, TaskType} from '../../api/api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId}) => {\r\n    let dispatch = useDispatch()\r\n    let onClickCheckBox = useCallback((e: boolean, id: string) => {\r\n        dispatch(actions.changeCheckedStatusAC(todolistId, id, e ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }, [dispatch, todolistId])\r\n\r\n    const onChangeTaskTitleText = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(actions.changeTaskTitleTextAC(todolistId, taskId, newTitle))\r\n    }, [dispatch])\r\n    return (\r\n        <div key={task.id} className={`${s.task} + ${task.status === TaskStatuses.Completed ? s.taskCheckbox : ''}`}>\r\n            <div>\r\n                <input type=\"checkbox\" checked={task.status === TaskStatuses.Completed} onClick={(e) => {\r\n                    dispatch((changeTaskCheckedTC(todolistId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)))\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskTitle}>\r\n                <ChangedSpanIntoInput title={task.title} changeItemText={(newTitle) => {\r\n                    dispatch(changeTaskTitleTC(todolistId, task.id, newTitle))\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskBtn}>\r\n                <IconButton aria-label=\"delete\" onClick={() => {\r\n                    dispatch(deleteTaskTC(todolistId, task.id))\r\n                }}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport s from './Todolist.module.css'\r\nimport {TodolistHeader} from \"../../../components/TodolistHeader/TodolistHeader\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {AddForm} from \"../../../components/AddForm/AddForm\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {actions, setTasksTC, addTaskTC} from '../tasksReducer'\r\nimport {changeTodolistFilterValueAC, FilterValuesType} from \"../todolistsReducer\"\r\nimport {Task} from \"../../../components/Task/Task\"\r\nimport {TaskStatuses, TaskType} from \"../../../api/api\"\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    removeTask?: any\r\n    changeFilter?: any\r\n    addNewTask?: any\r\n    onCheckedBox?: any\r\n    changeTaskTitleText?: any\r\n\r\n    todolistId: string\r\n    title: string\r\n    newArrTasks: Array<TaskType>\r\n    removeTodolist: (todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({todolistId, changeTodolistTitle, title, filter, newArrTasks, removeTodolist}) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(todolistId))\r\n    },[])\r\n\r\n    let allTasks = newArrTasks\r\n    if (filter === 'active') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n//-----------filter------------\r\n    let onFilterAll = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'all'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterActive = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'active'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterCompleted = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'completed'))\r\n    }, [dispatch, todolistId])\r\n//------------title------------\r\n\r\n    //----add tasks---\r\n    const addNewTask = useCallback((inputValue: string) => {\r\n        dispatch(addTaskTC(todolistId, inputValue))\r\n    }, [dispatch, todolistId])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div>\r\n                <TodolistHeader title={title} todolistId={todolistId} removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}/>\r\n                <AddForm addNewItem={addNewTask}/>\r\n\r\n                <div className={s.tasks}>\r\n                    {allTasks.map(t => <Task key={t.id} task={t} todolistId={todolistId}/>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onFilterAll}\r\n                        variant={filter === 'all' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}> All</Button>\r\n                <Button onClick={onFilterActive}\r\n                        variant={filter === 'active' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Active</Button>\r\n                <Button onClick={onFilterCompleted}\r\n                        variant={filter === 'completed' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addNewTodolistTC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    setTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolistsReducer'\r\nimport {TasksType} from './tasksReducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddForm} from '../../components/AddForm/AddForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const addNewTodolist = useCallback((inputValue: string) => {\r\n        dispatch(addNewTodolistTC(inputValue))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        <>\r\n            <Grid container style={{padding: '10px'}}>\r\n                <div className=\"addTodolist\">\r\n                    <div className='addTodolistTitle'>Add new TodoList:</div>\r\n                    <AddForm addNewItem={(inputValue) => {\r\n                        addNewTodolist(inputValue)\r\n                    }}/>\r\n                </div>\r\n            </Grid>\r\n\r\n            <Grid container>\r\n                <div className=\"allTodolists\">\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let newArrTasks = tasks[tl.id]\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper elevation={5}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            todolistId={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                            newArrTasks={newArrTasks}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography, LinearProgress} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className='app'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"> </Typography>\r\n                    <Button color=\"inherit\"> </Button>\r\n                </Toolbar>\r\n                <LinearProgress color=\"secondary\" />\r\n            </AppBar>\r\n            <Container>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from \"../features/TodolistsList/tasksReducer\";\r\nimport {todolistReducer} from \"../features/TodolistsList/todolistsReducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from \"./app/store\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1sKHV\",\"task\":\"Todolist_task__2CoXw\",\"taskInput\":\"Todolist_taskInput__1YGyF\",\"taskCheckbox\":\"Todolist_taskCheckbox__3E8rg\",\"taskTitle\":\"Todolist_taskTitle__PPMPR\",\"error\":\"Todolist_error__3tGi2\",\"arrayInputAddTasks\":\"Todolist_arrayInputAddTasks__2i-6M\",\"activeButton\":\"Todolist_activeButton__1Ua8V\",\"todolistHeader\":\"Todolist_todolistHeader__1Sc5z\",\"todolistTitle\":\"Todolist_todolistTitle__2QeD0\"};"],"sourceRoot":""}