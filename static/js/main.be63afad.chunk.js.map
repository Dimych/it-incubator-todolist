{"version":3,"sources":["api/api.tsx","components/ChangedSpanIntoInput/ChangedSpanIntoInput.tsx","components/TodolistHeader/TodolistHeader.tsx","components/AddForm/AddForm.tsx","store/tasksReducer/tasksReducer.ts","store/todolistsReducer/todolistsReducer.ts","components/Task/Task.tsx","components/Todolist/Todolist.tsx","AppWithRedux.tsx","store/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","ChangedSpanIntoInput","React","memo","title","changeItemText","useState","editMod","setEditMod","value","setValue","editModOn","useCallback","editModOff","TextField","id","size","onBlur","onChange","e","currentTarget","autoFocus","onDoubleClick","TodolistHeader","removeTodolist","changeTodolistTitle","todolistId","deleteTodolist","onChangeTitleText","newTitle","className","s","todolistHeader","todolistTitle","IconButton","aria-label","onClick","color","AddForm","addNewItem","inputValue","setInputValue","error","setError","addTask","trim","taskInput","label","variant","onKeyPress","key","Boolean","style","padding","ActionsTypes","task","description","completed","status","priority","startDate","deadline","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","then","res","data","post","todolistID","delete","tasksApi","taskId","put","initialState","changeTodolistFilterValueAC","newFilterValue","type","actions","ADD_TASK","REMOVE_TASK","CHANGE_TASK_TITLE","CHANGE_CHECKED_STATUS","tasks","SET_TASKS","Task","dispatch","useDispatch","Completed","New","taskCheckbox","checked","taskID","taskTitle","taskBtn","Todolist","filter","newArrTasks","useEffect","items","allTasks","t","onFilterAll","onFilterActive","onFilterCompleted","addNewTask","item","addTaskTC","todolist","map","filterButtons","Button","margin","width","fontSize","AppWithRedux","todolists","useSelector","state","addNewTodolist","AppBar","position","Toolbar","edge","Menu","Typography","Container","Grid","container","tl","Paper","elevation","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","newTodolist","newArrTodolist","find","td","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.be63afad.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype ResponseType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\ntype ResponseGetTaskType = {\r\n    error: string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\n\r\nconst task = {\r\n    title: '',\r\n    description: 'description',\r\n    completed: false,\r\n    status: 1,\r\n    priority: 1,\r\n    startDate: '11.12.2020',\r\n    deadline: '12.12.2020',\r\n}\r\n\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4ecc4fdb-da6b-45f9-bb99-93bccea55cd4'\r\n    }\r\n})\r\n\r\nexport const todolistsApi = {\r\n    authMe: () => {\r\n        return instance.get<ResponseType<AuthDataType>>('auth/me').then(res => res.data)\r\n    },\r\n    getTodolists: () => {\r\n        return instance.get<Array<TodolistsType>>('todo-lists').then(res => res.data)\r\n    },\r\n    createTodolist: (title: string) => {\r\n        return instance.post<ResponseType<{ item: TodolistsType }>>('todo-lists', {title}).then(res => res.data)\r\n    },\r\n    deleteTodolist: (todolistID: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\r\n    },\r\n    changeTodolistTitle: (todolistId: string, title: string) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksApi = {\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<ResponseGetTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTaskTitle: (todolistId: string, taskId: string, title: string) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, {...task, title: title})\r\n    },\r\n    updateTaskChecked: (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, {...task, status: status})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}","import React, {ChangeEvent, useCallback, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\"\r\n\r\nexport type ChangedSpanIntoInputPropsType = {\r\n    title: string\r\n    changeItemText: (value: string) => void\r\n}\r\n\r\nexport const ChangedSpanIntoInput: React.FC<ChangedSpanIntoInputPropsType> = React.memo(({title, changeItemText}) => {\r\n    let [editMod, setEditMod] = useState(false)\r\n    let [value, setValue] = useState('')\r\n    //----ON-------\r\n    const editModOn = useCallback(() => {\r\n        setEditMod(true)\r\n        setValue(title)\r\n    }, [title])\r\n    //----OFF-----\r\n    const editModOff = useCallback(() => {\r\n        setEditMod(false)\r\n        changeItemText(value)\r\n    }, [changeItemText,value])\r\n    //-----input------\r\n    const onChangeInputText =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMod\r\n                ? <TextField id=\"standard-size-small\"\r\n                             size=\"small\"\r\n                             onBlur={editModOff}\r\n                             value={value}\r\n                             onChange={onChangeInputText} autoFocus/>\r\n                : <div onDoubleClick={editModOn}>{title}</div>\r\n            }\r\n        </div>\r\n    )\r\n})","import s from \"../Todolist/Todolist.module.css\"\r\nimport {ChangedSpanIntoInput} from \"../ChangedSpanIntoInput/ChangedSpanIntoInput\"\r\nimport React, {useCallback} from \"react\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = React.memo(({removeTodolist, changeTodolistTitle, title, todolistId}) => {\r\n    let deleteTodolist = useCallback(() => {\r\n        removeTodolist(todolistId)\r\n    }, [removeTodolist, todolistId])\r\n\r\n    let onChangeTitleText = useCallback((newTitle: string, todolistId: string) => {\r\n        changeTodolistTitle(newTitle, todolistId)\r\n    }, [changeTodolistTitle])\r\n    return (\r\n        <div className={s.todolistHeader}>\r\n            <div className={s.todolistTitle}>\r\n                <ChangedSpanIntoInput title={title} changeItemText={(newTitle) => {\r\n                    onChangeTitleText(newTitle, todolistId)\r\n                }}/>\r\n            </div>\r\n\r\n            <div>\r\n                <IconButton aria-label=\"delete\" onClick={deleteTodolist}>\r\n                    <DeleteIcon color={\"secondary\"}/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport s from \"../Todolist/Todolist.module.css\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleOutlineTwoToneIcon from \"@material-ui/icons/AddCircleOutlineTwoTone\";\r\n\r\nexport type AddFormPropsType = {\r\n    addNewItem: (inputValue: string) => void\r\n}\r\nexport const AddForm: React.FC<AddFormPropsType> = React.memo(({addNewItem}) => {\r\n    let [inputValue, setInputValue] = useState<string>('')\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n    let addTask = useCallback((inputValue: string) => {\r\n        if (inputValue.trim()) {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        } else {\r\n            setError('field is required')\r\n        }\r\n    }, [addNewItem])\r\n\r\n\r\n    let onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        inputValue.trim() && setError(null)\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    let addInputText = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (inputValue.trim() && e.key === 'Enter') {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskInput}>\r\n            <TextField id=\"outlined-error-helper-text\"\r\n                       label={error ? \"error\" : \"new task\"}\r\n                       variant=\"outlined\"\r\n                       color={'secondary'}\r\n                       value={inputValue}\r\n                       onChange={onInputChange}\r\n                       onKeyPress={addInputText}\r\n                       error={Boolean(error)}\r\n\r\n            />\r\n            <IconButton onClick={() => addTask(inputValue)}>\r\n                <AddCircleOutlineTwoToneIcon color={\"primary\"} style={{padding: '0px'}}/>\r\n            </IconButton>\r\n            {error ? <div className={s.error}> {error} </div> : null}\r\n        </div>\r\n    )\r\n})","import {v1} from 'uuid'\r\nimport {\r\n    ADD_TODOLIST,\r\n    addTodolistAC,\r\n    REMOVE_TODOLIST,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n    SET_TODOLISTS,\r\n} from '../todolistsReducer/todolistsReducer'\r\nimport {TaskPriorities, tasksApi, TaskStatuses, TaskType, todolistsApi} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport enum ActionsTypes {\r\n    ADD_TASK = 'ADD_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE',\r\n    CHANGE_CHECKED_STATUS = 'CHANGE_CHECKED_STATUS',\r\n    SET_TASKS = 'SET_TASKS'\r\n}\r\n\r\ntype ActionsType = ReturnType<ActionType<typeof actions>>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ActionsTypes.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case ActionsTypes.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        case ActionsTypes.CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, title: action.newTitle} : task)\r\n            }\r\n        case ActionsTypes.CHANGE_CHECKED_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, status: action.status} : task)\r\n            }\r\n        case ADD_TODOLIST: {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolist.id] = []\r\n            return stateCopy\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case SET_TODOLISTS: {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case ActionsTypes.SET_TASKS: {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport const actions = {\r\n    addNewTaskAC: (task: TaskType) => ({type: ActionsTypes.ADD_TASK, task} as const),\r\n    removeTaskAC: (todolistId: string, taskId: string) => ({type: ActionsTypes.REMOVE_TASK, todolistId, taskId} as const),\r\n    changeTaskTitleTextAC: (todolistId: string, taskId: string, newTitle: string) => ({type: ActionsTypes.CHANGE_TASK_TITLE, todolistId, taskId, newTitle} as const),\r\n    changeCheckedStatusAC: (todolistId: string, taskId: string, status: TaskStatuses) => ({type: ActionsTypes.CHANGE_CHECKED_STATUS, todolistId, taskId, status} as const),\r\n    setTasksAC: (todolistId: string, tasks: Array<TaskType>) => ({type: ActionsTypes.SET_TASKS, todolistId, tasks} as const),\r\n}\r\n\r\nexport const setTasksTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    tasksApi.getTasks(todolistID)\r\n        .then(res => {\r\n            dispatch(actions.setTasksAC(todolistID, res.data.items))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch) => {\r\n    tasksApi.createTask(todolistID, title)\r\n        .then(res => {\r\n            dispatch(actions.addNewTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch) => {\r\n    tasksApi.deleteTask(todolistID, taskID)\r\n        .then(res => {\r\n            dispatch(actions.removeTaskAC(todolistID, taskID))\r\n        })\r\n}\r\nexport const changeTaskTitleTC = (todolistID: string, taskID: string, title: string) => (dispatch: Dispatch) => {\r\n    tasksApi.updateTaskTitle(todolistID, taskID, title)\r\n        .then(res => {\r\n            dispatch(actions.changeTaskTitleTextAC(todolistID, taskID, title))\r\n        })\r\n}\r\nexport const changeTaskCheckedTC = (todolistID: string, taskID: string, status: TaskStatuses) => (dispatch: Dispatch) => {\r\n    tasksApi.updateTaskChecked(todolistID, taskID, status)\r\n        .then(res => {\r\n            debugger\r\n            dispatch(actions.changeCheckedStatusAC(todolistID, taskID, status))\r\n        })\r\n}","import {v1} from 'uuid'\r\nimport {todolistsApi, TodolistsType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport { AppRootStateType } from '../store'\r\n\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\nconst CHANGE_TODOLIST_FILTER_VALUE = 'CHANGE_TODOLIST_FILTER_VALUE'\r\nexport const SET_TODOLISTS = 'SET_TODOLISTS'\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistsType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterValueAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            let newTodolist: TodolistDomainType = {...action.todolist, filter: 'all'}\r\n            return [newTodolist, ...state]\r\n        case REMOVE_TODOLIST:\r\n            let newArrTodolist = state.filter(t => t.id !== action.id)\r\n            return [...newArrTodolist]\r\n        case CHANGE_TODOLIST_TITLE: {\r\n            let todolist = state.find(td => td.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.newTitle\r\n            }\r\n            return [...state]\r\n        }\r\n        case CHANGE_TODOLIST_FILTER_VALUE: {\r\n            let todolist = state.find(td => td.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.newFilterValue\r\n            }\r\n            return [...state]\r\n        }\r\n        case SET_TODOLISTS: {\r\n            return action.todolists.map(todolist => {\r\n                return {...todolist, filter: 'all'}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({type: ADD_TODOLIST, todolist} as const)\r\nexport const removeTodolistAC = (id: string) => ({type: REMOVE_TODOLIST, id} as const)\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) => ({type: CHANGE_TODOLIST_TITLE,id,newTitle} as const)\r\nexport const changeTodolistFilterValueAC = (id: string, newFilterValue: FilterValuesType) => ({type: CHANGE_TODOLIST_FILTER_VALUE,id,newFilterValue} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistsType>) => ({type: SET_TODOLISTS, todolists} as const)\r\n\r\nexport const setTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistsApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res))\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    todolistsApi.deleteTodolist(todolistID)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistID))\r\n        })\r\n}\r\nexport const addNewTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsApi.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.item))\r\n        })\r\n}","import {useDispatch} from 'react-redux'\r\nimport {actions, changeTaskCheckedTC, changeTaskTitleTC, deleteTaskTC} from '../../store/tasksReducer/tasksReducer'\r\nimport s from '../Todolist/Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from '../ChangedSpanIntoInput/ChangedSpanIntoInput'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport React, {useCallback} from 'react'\r\nimport {TaskStatuses, TaskType} from '../../api/api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId}) => {\r\n    let dispatch = useDispatch()\r\n    let onClickCheckBox = useCallback((e: boolean, id: string) => {\r\n        dispatch(actions.changeCheckedStatusAC(todolistId, id, e ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }, [dispatch, todolistId])\r\n\r\n    const onChangeTaskTitleText = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(actions.changeTaskTitleTextAC(todolistId, taskId, newTitle))\r\n    }, [dispatch])\r\n    return (\r\n        <div key={task.id} className={`${s.task} + ${task.status === TaskStatuses.Completed ? s.taskCheckbox : ''}`}>\r\n            <div>\r\n                <input type=\"checkbox\" checked={task.status === TaskStatuses.Completed} onClick={(e) => {\r\n                    dispatch((changeTaskCheckedTC(todolistId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)))\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskTitle}>\r\n                <ChangedSpanIntoInput title={task.title} changeItemText={(newTitle) => {\r\n                    dispatch(changeTaskTitleTC(todolistId, task.id, newTitle))\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskBtn}>\r\n                <IconButton aria-label=\"delete\" onClick={() => {\r\n                    dispatch(deleteTaskTC(todolistId, task.id))\r\n                }}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport s from './Todolist.module.css'\r\nimport {TodolistHeader} from \"../TodolistHeader/TodolistHeader\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {AddForm} from \"../AddForm/AddForm\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {actions, setTasksTC, addTaskTC} from '../../store/tasksReducer/tasksReducer'\r\nimport {changeTodolistFilterValueAC, FilterValuesType} from \"../../store/todolistsReducer/todolistsReducer\"\r\nimport {Task} from \"../Task/Task\"\r\nimport {TaskStatuses, TaskType} from \"../../api/api\"\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    removeTask?: any\r\n    changeFilter?: any\r\n    addNewTask?: any\r\n    onCheckedBox?: any\r\n    changeTaskTitleText?: any\r\n\r\n    todolistId: string\r\n    title: string\r\n    newArrTasks: Array<TaskType>\r\n    removeTodolist: (todolistId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({todolistId, changeTodolistTitle, title, filter, newArrTasks, removeTodolist}) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(todolistId))\r\n    },[])\r\n\r\n    let allTasks = newArrTasks\r\n    if (filter === 'active') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n//-----------filter------------\r\n    let onFilterAll = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'all'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterActive = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'active'))\r\n    }, [dispatch, todolistId])\r\n    let onFilterCompleted = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolistId, 'completed'))\r\n    }, [dispatch, todolistId])\r\n//------------title------------\r\n\r\n    //----add tasks---\r\n    const addNewTask = useCallback((inputValue: string) => {\r\n        dispatch(addTaskTC(todolistId, inputValue))\r\n    }, [dispatch, todolistId])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div>\r\n                <TodolistHeader title={title} todolistId={todolistId} removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}/>\r\n                <AddForm addNewItem={addNewTask}/>\r\n\r\n                <div className={s.tasks}>\r\n                    {allTasks.map(t => <Task key={t.id} task={t} todolistId={todolistId}/>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onFilterAll}\r\n                        variant={filter === 'all' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}> All</Button>\r\n                <Button onClick={onFilterActive}\r\n                        variant={filter === 'active' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Active</Button>\r\n                <Button onClick={onFilterCompleted}\r\n                        variant={filter === 'completed' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './components/Todolist/Todolist'\r\nimport {AddForm} from \"./components/AddForm/AddForm\"\r\nimport {AppBar, Button, IconButton, Toolbar, Typography, Container, Grid, Paper} from '@material-ui/core'\r\nimport {Menu} from \"@material-ui/icons\"\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    TodolistDomainType,\r\n    setTodolistsTC,\r\n    deleteTodolistTC,\r\n    addNewTodolistTC\r\n} from './store/todolistsReducer/todolistsReducer'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"./store/store\"\r\nimport { TasksType } from './store/tasksReducer/tasksReducer'\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const addNewTodolist = useCallback((inputValue: string) => {\r\n        dispatch(addNewTodolistTC(inputValue))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleAC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        <div className='app'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"> </Typography>\r\n                    <Button color=\"inherit\"> </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <div className=\"addTodolist\">\r\n                        <div className='addTodolistTitle'>Add new TodoList:</div>\r\n                        <AddForm addNewItem={(inputValue) => {\r\n                            addNewTodolist(inputValue)\r\n                        }}/>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                    <div className=\"allTodolists\">\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let newArrTasks = tasks[tl.id]\r\n                                return (\r\n                                    <Grid item>\r\n                                        <Paper elevation={5}>\r\n                                            <Todolist\r\n                                                key={tl.id}\r\n                                                todolistId={tl.id}\r\n                                                title={tl.title}\r\n                                                filter={tl.filter}\r\n                                                newArrTasks={newArrTasks}\r\n                                                removeTodolist={removeTodolist}\r\n                                                changeTodolistTitle={changeTodolistTitle}\r\n                                            />\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from \"./tasksReducer/tasksReducer\";\r\nimport {todolistReducer} from \"./todolistsReducer/todolistsReducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport AppWithRedux from './AppWithRedux'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from \"./store/store\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__3FQwx\",\"task\":\"Todolist_task__wGIi0\",\"taskInput\":\"Todolist_taskInput__1_wg0\",\"taskCheckbox\":\"Todolist_taskCheckbox__33cCi\",\"taskTitle\":\"Todolist_taskTitle__2nSxy\",\"error\":\"Todolist_error__3s5Cc\",\"arrayInputAddTasks\":\"Todolist_arrayInputAddTasks__lKjrK\",\"activeButton\":\"Todolist_activeButton__33tQ8\",\"todolistHeader\":\"Todolist_todolistHeader__3N_h6\",\"todolistTitle\":\"Todolist_todolistTitle__2y8df\"};"],"sourceRoot":""}