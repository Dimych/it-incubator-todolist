{"version":3,"sources":["api/api.tsx","app/appReducer.ts","utills/error-utils.ts","features/TodolistsList/tasksReducer.ts","features/TodolistsList/todolistsReducer.ts","components/AddForm/AddForm.tsx","components/ChangedSpanIntoInput/ChangedSpanIntoInput.tsx","components/TodolistHeader/TodolistHeader.tsx","components/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/SnackBar/SnackBar.tsx","app/App.tsx","app/store.ts","index.tsx","features/TodolistsList/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","typesAppReducer","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","then","res","data","title","post","todolistID","delete","todolistId","put","tasksApi","taskId","model","intialState","status","error","changeAppStatusAC","type","SET_STATUS","changeAppErrorTextAC","SET_ERROR","ActionsTypes","handleServerAppError","dispatch","messages","length","handleServerNetworkError","err","message","initialState","changeTodolistFilterValueAC","id","newFilterValue","AddForm","React","memo","addNewItem","disabled","useState","inputValue","setInputValue","setError","addTask","useSelector","state","app","useCallback","trim","className","s","taskInput","TextField","label","variant","color","value","onChange","e","currentTarget","onKeyPress","key","Boolean","IconButton","onClick","style","padding","ChangedSpanIntoInput","changeItemText","editMod","setEditMod","setValue","editModOn","editModOff","size","onBlur","autoFocus","onDoubleClick","TodolistHeader","removeTodolist","changeTodolistTitle","todolist","deleteTodolist","onChangeTitleText","newTitle","todolistHeader","todolistTitle","aria-label","entityStatus","actions","task","ADD_TASK","REMOVE_TASK","CHANGE_TASK_TITLE","CHANGE_CHECKED_STATUS","tasks","SET_TASKS","Task","useDispatch","onClickCheckBox","taskID","getState","find","t","console","warn","Error","deadline","description","priority","startDate","resultCode","catch","changeTaskCheckedTC","checked","Completed","New","onChangeTaskTitleText","taskCheckbox","taskTitle","taskBtn","Todolist","newArrTasks","demo","useEffect","items","allTasks","filter","onFilterAll","onFilterActive","onFilterCompleted","addNewTask","item","map","filterButtons","Button","margin","width","fontSize","TodolistsList","todolists","addNewTodolist","changeTodolistTitleTC","removeTodolistAC","Grid","container","tl","Paper","elevation","SnackBar","props","CustomizedSnackbars","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3cea7c76.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\ntype ResponseGetTaskType = {\r\n    error: string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\n\r\nconst model = {\r\n    title: '',\r\n    description: 'description',\r\n    status: 1,\r\n    priority: 1,\r\n    startDate: '11.12.2020',\r\n    deadline: '12.12.2020',\r\n}\r\n\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4ecc4fdb-da6b-45f9-bb99-93bccea55cd4'\r\n    }\r\n})\r\n\r\nexport const todolistsApi = {\r\n    authMe: () => {\r\n        return instance.get<ResponseType<AuthDataType>>('auth/me').then(res => res.data)\r\n    },\r\n    getTodolists: () => {\r\n        return instance.get<Array<TodolistsType>>('todo-lists').then(res => res.data)\r\n    },\r\n    createTodolist: (title: string) => {\r\n        return instance.post<ResponseType<{ item: TodolistsType }>>('todo-lists', {title}).then(res => res.data)\r\n    },\r\n    deleteTodolist: (todolistID: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\r\n    },\r\n    changeTodolistTitle: (todolistId: string, title: string) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksApi = {\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<ResponseGetTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask: (todolistId: string, taskId: string, model: ModelType) => {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, {...model})\r\n    },\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}","const intialState: StateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state:StateType = intialState, action: ActionsType): StateType  => {\r\n    switch (action.type) {\r\n        case 'todolist/appReducer/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case 'todolist/appReducer/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actionCreators\r\nexport const changeAppStatusAC = (status: StatusType) => ({type: typesAppReducer.SET_STATUS, status} as const)\r\nexport const changeAppErrorTextAC = (error: null | string) => ({type: typesAppReducer.SET_ERROR, error} as const)\r\n\r\n\r\n//types\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype StateType = {\r\n    status: StatusType,\r\n    error:  null | string\r\n}\r\nexport enum typesAppReducer {\r\n    SET_STATUS = 'todolist/appReducer/SET_STATUS',\r\n    SET_ERROR = 'todolist/appReducer/SET_ERROR',\r\n}\r\nexport type ChangeAppStatusACType = ReturnType<typeof changeAppStatusAC>\r\nexport type ChangeAppErrorTextACType = ReturnType<typeof changeAppErrorTextAC>\r\ntype ActionsType =\r\n    | ChangeAppStatusACType\r\n    | ChangeAppErrorTextACType\r\n","import {\r\n    changeAppErrorTextAC,\r\n    ChangeAppErrorTextACType,\r\n    changeAppStatusAC,\r\n    ChangeAppStatusACType\r\n} from '../app/appReducer'\r\nimport {ResponseType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(res: ResponseType<D>, dispatch: Dispatch<ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    if (res.messages.length) {\r\n        dispatch(changeAppErrorTextAC(res.messages[0]))\r\n    } else {\r\n        dispatch(changeAppErrorTextAC('Some error occurred'))\r\n    }\r\n    dispatch(changeAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('failed'))\r\n    dispatch(changeAppErrorTextAC(err.message ? err.message : 'Some error occurred'))\r\n}","import {\r\n    ADD_TODOLIST, addTodolistAC, changeTodolistEntityStatus,\r\n    REMOVE_TODOLIST, removeTodolistAC,\r\n    SET_TODOLISTS, setTodolistsAC, changeTodolistEntityStatusType\r\n} from './todolistsReducer'\r\nimport {ModelType, tasksApi, TaskStatuses, TaskType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {changeAppErrorTextAC, ChangeAppErrorTextACType, changeAppStatusAC, ChangeAppStatusACType} from '../../app/appReducer'\r\nimport {Simulate} from 'react-dom/test-utils'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utills/error-utils'\r\n\r\nconst initialState: TasksType = {}\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ActionsTypes.ADD_TASK:\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case ActionsTypes.REMOVE_TASK:\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n        case ActionsTypes.CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, title: action.newTitle} : task)\r\n            }\r\n        case ActionsTypes.CHANGE_CHECKED_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, status: action.status} : task)\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.todolist.id]: []}\r\n        case REMOVE_TODOLIST: {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case SET_TODOLISTS: {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case ActionsTypes.SET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const actions = {\r\n    addNewTaskAC: (task: TaskType) =>\r\n        ({type: ActionsTypes.ADD_TASK, task} as const),\r\n    removeTaskAC: (todolistId: string, taskId: string) =>\r\n        ({type: ActionsTypes.REMOVE_TASK, todolistId, taskId} as const),\r\n    changeTaskTitleTextAC: (todolistId: string, taskId: string, newTitle: string) =>\r\n        ({type: ActionsTypes.CHANGE_TASK_TITLE, todolistId, taskId, newTitle} as const),\r\n    changeCheckedStatusAC: (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n        ({type: ActionsTypes.CHANGE_CHECKED_STATUS, todolistId, taskId, status} as const),\r\n    setTasksAC: (todolistId: string, tasks: Array<TaskType>) =>\r\n        ({type: ActionsTypes.SET_TASKS, todolistId, tasks} as const),\r\n}\r\n\r\n// thunks\r\nexport const setTasksTC = (todolistID: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    tasksApi.getTasks(todolistID)\r\n        .then(res => {\r\n            dispatch(actions.setTasksAC(todolistID, res.data.items))\r\n            dispatch(changeAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    tasksApi.createTask(todolistID, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(actions.addNewTaskAC(res.data.data.item))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType\r\n                                                                        | changeTodolistEntityStatusType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    // dispatch(changeTodolistEntityStatus(todolistID, 'loading'))\r\n    tasksApi.deleteTask(todolistID, taskID)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0){\r\n                dispatch(actions.removeTaskAC(todolistID, taskID))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const changeTaskTitleTC = (todolistID: string, taskID: string, title: string) =>\r\n    (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            throw new Error('task not found in the state')\r\n            return\r\n        }\r\n        const model: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            title: title\r\n        }\r\n        dispatch(changeAppStatusAC('loading'))\r\n        tasksApi.updateTask(todolistID, taskID, model)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(actions.changeTaskTitleTextAC(todolistID, taskID, title))\r\n                    dispatch(changeAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\nexport const changeTaskCheckedTC = (todolistID: string, taskID: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            throw new Error('task not found in the state')\r\n            return\r\n        }\r\n        const model: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: status,\r\n            title: task.title\r\n        }\r\n        dispatch(changeAppStatusAC('loading'))\r\n        tasksApi.updateTask(todolistID, taskID, model)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0){\r\n                    dispatch(actions.changeCheckedStatusAC(todolistID, taskID, status))\r\n                    dispatch(changeAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never\r\ntype ActionsType = ReturnType<ActionType<typeof actions>>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nexport enum ActionsTypes {\r\n    ADD_TASK = 'ADD_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE',\r\n    CHANGE_CHECKED_STATUS = 'CHANGE_CHECKED_STATUS',\r\n    SET_TASKS = 'SET_TASKS'\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}","import {todolistsApi, TodolistsType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {changeAppStatusAC, ChangeAppStatusACType, ChangeAppErrorTextACType, changeAppErrorTextAC, StatusType} from '../../app/appReducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utills/error-utils'\r\n\r\n// variables\r\nexport const ADD_TODOLIST = 'ADD_TODOLIST'\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE'\r\nconst CHANGE_TODOLIST_FILTER_VALUE = 'CHANGE_TODOLIST_FILTER_VALUE'\r\nexport const SET_TODOLISTS = 'SET_TODOLISTS'\r\nexport const CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS'\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState,\r\n                                action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case REMOVE_TODOLIST:\r\n            return [...state.filter(t => t.id !== action.id)]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.newTitle} : tl)\r\n        case CHANGE_TODOLIST_FILTER_VALUE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.newFilterValue} : tl)\r\n        case CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case SET_TODOLISTS: {\r\n            return action.todolists.map(todolist => {\r\n                return {...todolist, filter: 'all', entityStatus: 'idle'}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addTodolistAC = (todolist: TodolistsType) =>\r\n    ({type: ADD_TODOLIST, todolist} as const)\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: REMOVE_TODOLIST, id} as const)\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) =>\r\n    ({type: CHANGE_TODOLIST_TITLE, id, newTitle} as const)\r\nexport const changeTodolistFilterValueAC = (id: string, newFilterValue: FilterValuesType) =>\r\n    ({type: CHANGE_TODOLIST_FILTER_VALUE, id, newFilterValue} as const)\r\nexport const changeTodolistEntityStatus = (id: string, status: StatusType) =>\r\n    ({type: CHANGE_TODOLIST_ENTITY_STATUS, id, status} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistsType>) =>\r\n    ({type: SET_TODOLISTS, todolists} as const)\r\n\r\n\r\n// thunks\r\nexport const setTodolistsTC = () => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    todolistsApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res))\r\n            dispatch(changeAppStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistID: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType >) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatus(todolistID, 'loading'))\r\n    todolistsApi.deleteTodolist(todolistID)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistID))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const addNewTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    todolistsApi.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.resultCode === 0){\r\n                dispatch(addTodolistAC(res.data.item))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n            }else {\r\n                handleServerAppError(res, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionsType | ChangeAppStatusACType | ChangeAppErrorTextACType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    todolistsApi.changeTodolistTitle(todolistID, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistID, title))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistsType & {\r\n    filter: FilterValuesType\r\n    entityStatus: StatusType\r\n}\r\n\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\nexport type ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterValueAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | changeTodolistEntityStatusType","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {TextField} from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AddCircleOutlineTwoToneIcon from '@material-ui/icons/AddCircleOutlineTwoTone'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {StatusType} from '../../app/appReducer'\r\n\r\nexport type AddFormPropsType = {\r\n    addNewItem: (inputValue: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddForm: React.FC<AddFormPropsType> = React.memo(({addNewItem, disabled = false}) => {\r\n    let [inputValue, setInputValue] = useState<string>('')\r\n    let [error, setError] = useState<string | null>('')\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n\r\n    let addTask = useCallback((inputValue: string) => {\r\n        if (inputValue.trim()) {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        } else {\r\n            setError('field is required')\r\n        }\r\n    }, [addNewItem])\r\n\r\n\r\n    let onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        inputValue.trim() && setError(null)\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    let addInputText = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (inputValue.trim() && e.key === 'Enter') {\r\n            addNewItem(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.taskInput}>\r\n            <TextField id=\"outlined-error-helper-text\"\r\n                       disabled={disabled}\r\n                       label={error ? 'error' : 'new task'}\r\n                       variant=\"outlined\"\r\n                       color={'secondary'}\r\n                       value={inputValue}\r\n                       onChange={onInputChange}\r\n                       onKeyPress={addInputText}\r\n                       error={Boolean(error)}\r\n            />\r\n            <IconButton onClick={() => addTask(inputValue)} disabled={disabled}>\r\n                <AddCircleOutlineTwoToneIcon color={'primary'} style={{padding: '0px'}}/>\r\n            </IconButton>\r\n            {error ? <div className={s.error}> {error} </div> : null}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\nexport type ChangedSpanIntoInputPropsType = {\r\n    title: string\r\n    changeItemText: (value: string) => void\r\n}\r\n\r\nexport const ChangedSpanIntoInput: React.FC<ChangedSpanIntoInputPropsType> = React.memo(({title, changeItemText}) => {\r\n    let [editMod, setEditMod] = useState(false)\r\n    let [value, setValue] = useState('')\r\n    //----ON-------\r\n    const editModOn = useCallback(() => {\r\n        setEditMod(true)\r\n        setValue(title)\r\n    }, [title])\r\n    //----OFF-----\r\n    const editModOff = useCallback(() => {\r\n        setEditMod(false)\r\n        changeItemText(value)\r\n    }, [changeItemText, value])\r\n    //-----input------\r\n    const onChangeInputText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMod\r\n                ? <TextField id=\"standard-size-small\"\r\n                             size=\"small\"\r\n                             onBlur={editModOff}\r\n                             value={value}\r\n                             onChange={onChangeInputText} autoFocus/>\r\n                : <div onDoubleClick={editModOn}>{title}</div>\r\n            }\r\n        </div>\r\n    )\r\n})","import s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from '../ChangedSpanIntoInput/ChangedSpanIntoInput'\r\nimport React, {useCallback} from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport {TodolistDomainType} from '../../features/TodolistsList/todolistsReducer'\r\n\r\ntype TodolistHeaderPropsType = {\r\n    todolist: TodolistDomainType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = React.memo(\r\n    ({removeTodolist, changeTodolistTitle, todolist}) => {\r\n        let deleteTodolist = useCallback(() => {\r\n            removeTodolist(todolist.id)\r\n        }, [removeTodolist, todolist.id])\r\n\r\n        let onChangeTitleText = useCallback((newTitle: string, todolistId: string) => {\r\n            changeTodolistTitle(newTitle, todolistId)\r\n        }, [changeTodolistTitle])\r\n        return (\r\n            <div className={s.todolistHeader}>\r\n                <div className={s.todolistTitle}>\r\n                    <ChangedSpanIntoInput title={todolist.title} changeItemText={(newTitle) => {\r\n                        onChangeTitleText(newTitle, todolist.id)\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <IconButton aria-label=\"delete\" onClick={deleteTodolist} disabled={todolist.entityStatus === 'loading'} >\r\n                        <DeleteIcon color={'secondary'}/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    })","import {useDispatch, useSelector} from 'react-redux'\r\nimport {actions, changeTaskCheckedTC, changeTaskTitleTC, deleteTaskTC} from '../../features/TodolistsList/tasksReducer'\r\nimport s from '../../features/TodolistsList/Todolist/Todolist.module.css'\r\nimport {ChangedSpanIntoInput} from '../ChangedSpanIntoInput/ChangedSpanIntoInput'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport React, {MouseEvent, useCallback} from 'react'\r\nimport {TaskStatuses, TaskType} from '../../api/api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {StatusType} from '../../app/appReducer'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId}) => {\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    let dispatch = useDispatch()\r\n\r\n    let onClickCheckBox = (e: MouseEvent<HTMLInputElement>)  => {\r\n        dispatch((changeTaskCheckedTC(todolistId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)))\r\n    }\r\n    const onChangeTaskTitleText = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(todolistId, task.id, newTitle))\r\n        }, [dispatch])\r\n\r\n    return (\r\n        <div key={task.id} className={`${s.task} + ${task.status === TaskStatuses.Completed ? s.taskCheckbox : ''}`}>\r\n            <div>\r\n                <input type=\"checkbox\" checked={task.status === TaskStatuses.Completed} onClick={(e) => {\r\n                    onClickCheckBox(e)\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskTitle}>\r\n                <ChangedSpanIntoInput title={task.title} changeItemText={(newTitle) => {\r\n                    onChangeTaskTitleText(newTitle)\r\n                }}/>\r\n            </div>\r\n            <div className={s.taskBtn}>\r\n                <IconButton aria-label=\"delete\"\r\n                            onClick={() => {dispatch(deleteTaskTC(todolistId, task.id))}} >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport s from './Todolist.module.css'\r\nimport {TodolistHeader} from \"../../../components/TodolistHeader/TodolistHeader\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {AddForm} from \"../../../components/AddForm/AddForm\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {actions, setTasksTC, addTaskTC} from '../tasksReducer'\r\nimport {changeTodolistFilterValueAC, FilterValuesType, TodolistDomainType} from '../todolistsReducer'\r\nimport {Task} from \"../../../components/Task/Task\"\r\nimport {TaskStatuses, TaskType} from \"../../../api/api\"\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    removeTask?: any\r\n    changeFilter?: any\r\n    addNewTask?: any\r\n    onCheckedBox?: any\r\n    changeTaskTitleText?: any\r\n\r\n    todolist: TodolistDomainType\r\n    newArrTasks: Array<TaskType>\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({ changeTodolistTitle, todolist,\r\n                                                                     newArrTasks, removeTodolist, demo = false,\r\n                                                                     ...props}) => {\r\n\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTasksTC(todolist.id))\r\n    },[])\r\n\r\n    let allTasks = newArrTasks\r\n    if (todolist.filter === 'active') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        allTasks = newArrTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n//-----------filter------------\r\n    let onFilterAll = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolist.id, 'all'))\r\n    }, [dispatch, todolist.id])\r\n    let onFilterActive = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolist.id, 'active'))\r\n    }, [dispatch, todolist.id])\r\n    let onFilterCompleted = useCallback(() => {\r\n        dispatch(changeTodolistFilterValueAC(todolist.id, 'completed'))\r\n    }, [dispatch, todolist.id])\r\n//------------title------------\r\n\r\n    //----add tasks---\r\n    const addNewTask = useCallback((inputValue: string) => {\r\n        dispatch(addTaskTC(todolist.id, inputValue))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div>\r\n                <TodolistHeader removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle} todolist={todolist}/>\r\n                <AddForm addNewItem={addNewTask} disabled={todolist.entityStatus === 'loading'} />\r\n\r\n                <div className={s.tasks}>\r\n                    {allTasks.map(t => <Task key={t.id} task={t} todolistId={todolist.id}/>)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onFilterAll}\r\n                        variant={todolist.filter === 'all' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}> All</Button>\r\n                <Button onClick={onFilterActive}\r\n                        variant={todolist.filter === 'active' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Active</Button>\r\n                <Button onClick={onFilterCompleted}\r\n                        variant={todolist.filter === 'completed' ? 'outlined' : 'contained'}\r\n                        size={'small'}\r\n                        style={{margin: '2px', width: '78px', fontSize: '11px'}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addNewTodolistTC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    setTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolistsReducer'\r\nimport {TasksType} from './tasksReducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddForm} from '../../components/AddForm/AddForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const addNewTodolist = useCallback((inputValue: string) => {\r\n        dispatch(addNewTodolistTC(inputValue))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        <>\r\n            <Grid container style={{padding: '10px'}}>\r\n                <div className=\"addTodolist\">\r\n                    <div className='addTodolistTitle'>Add new TodoList:</div>\r\n                    <AddForm addNewItem={(inputValue) => {\r\n                        addNewTodolist(inputValue)\r\n                    }}/>\r\n                </div>\r\n            </Grid>\r\n\r\n            <Grid container>\r\n                <div className=\"allTodolists\">\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let newArrTasks = tasks[tl.id]\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper elevation={5}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            todolist={tl}\r\n                                            newArrTasks={newArrTasks}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                            demo={demo}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {changeAppErrorTextAC, StatusType} from '../../app/appReducer'\r\n\r\nfunction SnackBar(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(changeAppErrorTextAC(null))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <SnackBar onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </SnackBar>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography, LinearProgress, Snackbar} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {StatusType} from './appReducer'\r\nimport CustomizedSnackbars from '../components/SnackBar/SnackBar'\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}) {\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    return (\r\n        <div className='app'>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"> </Typography>\r\n                    <Button color=\"inherit\"> </Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n\r\n            </AppBar>\r\n            <Container>\r\n                <TodolistsList demo={demo}/>\r\n            </Container>\r\n            <div className='snackBar'>\r\n                <CustomizedSnackbars/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from \"../features/TodolistsList/tasksReducer\";\r\nimport {todolistReducer} from \"../features/TodolistsList/todolistsReducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from \"./app/store\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1sKHV\",\"task\":\"Todolist_task__2CoXw\",\"taskInput\":\"Todolist_taskInput__1YGyF\",\"taskCheckbox\":\"Todolist_taskCheckbox__3E8rg\",\"taskTitle\":\"Todolist_taskTitle__PPMPR\",\"error\":\"Todolist_error__3tGi2\",\"arrayInputAddTasks\":\"Todolist_arrayInputAddTasks__2i-6M\",\"activeButton\":\"Todolist_activeButton__1Ua8V\",\"todolistHeader\":\"Todolist_todolistHeader__1Sc5z\",\"todolistTitle\":\"Todolist_todolistTitle__2QeD0\"};"],"sourceRoot":""}